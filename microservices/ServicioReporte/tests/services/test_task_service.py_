import pytest
from unittest.mock import patch, MagicMock
from ServicioReporte.services.task_service import TaskService
from ServicioReporte.commands.task_update import UpdateTask
from ServicioReporte.commands.task_get import GetTask
from ServicioReporte.commands.log_get_by_filters import GetLogs


class TestTaskService:
    @patch("boto3.client")
    def test_enqueue_task(self, mock_boto_client):
        mock_sqs_client = MagicMock()
        mock_boto_client.return_value = mock_sqs_client
        mock_sqs_client.send_message.return_value = {"MessageId": "mock-message-id"}

        service = TaskService()
        task_id = "task-123"
        result = service.enqueue_task(task_id)

        assert result == "mock-message-id"
        mock_sqs_client.send_message.assert_called_once()

    @patch("boto3.client")
    def test_process_message(self, mock_boto_client):
        mock_s3_client = MagicMock()
        mock_boto_client.return_value = mock_s3_client

        mock_task = MagicMock()
        mock_task.filters = '{"source_id": "src123", "event_type": "INFO", "order": "desc"}'
        with patch("ServicioReporte.commands.task_get.GetTask.execute", return_value=mock_task), \
             patch("ServicioReporte.commands.log_get_by_filters.GetLogs.execute", return_value=[]), \
             patch("ServicioReporte.commands.task_update.UpdateTask.execute") as mock_update_task:
            
            service = TaskService()
            message = {"Body": '{"task_id": "task-123"}'}
            service.process_message(message)

            mock_update_task.assert_called_once()
            mock_s3_client.put_object.assert_called_once()

    @patch("boto3.client")
    def test_poll_queue(self, mock_boto_client):
        mock_sqs_client = MagicMock()
        mock_boto_client.return_value = mock_sqs_client

        mock_message = {
            "Body": '{"task_id": "task-123"}',
            "ReceiptHandle": "mock-receipt-handle",
        }
        mock_sqs_client.receive_message.return_value = {"Messages": [mock_message]}

        service = TaskService()
        with patch.object(service, "process_message") as mock_process_message:
            service.stop_event.set()  # Stop after the first iteration
            service.poll_queue()

            mock_process_message.assert_called_once_with(mock_message)
            mock_sqs_client.delete_message.assert_called_once_with(
                QueueUrl=service.queue_url, ReceiptHandle="mock-receipt-handle"
            )
