name: CI Pipeline

on:
  pull_request:
    branches:
      - main
    paths:
      - 'web-app/**'
      - 'microservices/ServicioSistema/**'

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      web_app_changed: ${{ steps.filter.outputs.web_app }}
      servicio_sistema_changed: ${{ steps.filter.outputs.servicio_sistema }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine changed files
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            web_app:
              - 'web-app/**'
            servicio_sistema:
              - 'microservices/ServicioSistema/**'

  test-web-app:
    if: needs.determine-changes.outputs.web_app_changed == 'true'
    runs-on: ubuntu-latest
    environment: ENV1
    needs: [determine-changes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./web-app
        run: npm install

      - name: Run Unit Tests for web-app
        working-directory: ./web-app
        run: npm run test -- --passWithNoTests

  test-and-deploy-servicio-sistema:
    if: needs.determine-changes.outputs.servicio_sistema_changed == 'true'
    runs-on: ubuntu-latest
    environment: ENV1
    needs: [determine-changes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Testing for ServicioSistema
      - name: Install dependencies for ServicioSistema
        working-directory: ./microservices/ServicioSistema
        run: pip install -r requirements.txt

      - name: Run tests for ServicioSistema
        working-directory: ./microservices/ServicioSistema
        run: pytest tests/

      # Configure AWS deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and push Docker
      - name: Build, tag, and push ServicioSistema image to ECR
        id: build-servicio-sistema
        working-directory: ./microservices/ServicioSistema
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: servicio-sistema
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Build ECS task definition
      - name: Render ECS task definition for ServicioSistema
        id: render-servicio-sistema
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./microservices/ecs/servicio-sistema-task-def.json
          container-name: servicio-sistema
          image: ${{ steps.build-servicio-sistema.outputs.image }}

      # ECS deploy
      - name: Deploy to ECS ServicioSistema
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-servicio-sistema.outputs.task-definition }}
          service: ServicioSistema
          cluster: ServicioSistema
          wait-for-service-stability: true
